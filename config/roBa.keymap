#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/input_transform.h>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <input/processors.dtsi>

#define SCROLL &scroll_mods 4 DOT
#define SNIPING &sniping_mods 5 RCLK


/ {
    trackball_listener {
     input-processors = 
              <&zip_temp_layer 1 3000>;
    };

   trackball_peripheral_snipe_listener {
          compatible = "zmk,input-behavior-listener";
          device = <&trackball>;
          layers = <4>;
          evt-type = <INPUT_EV_REL>;
          x-input-code = <INPUT_REL_X>;
          y-input-code = <INPUT_REL_Y>;
          scale-multiplier = <1>;
          scale-divisor = <1>;
          bindings = <&ib_snipe_scaler_x 1 8 &ib_snipe_scaler_y 1 8>;
   };


    ib_snipe_scaler_x: ib_snipe_scaler_x {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_X>;
    };

    ib_snipe_scaler_y: ib_snipe_scaler_y {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_Y>;
    };


    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        ht: positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        scroll_mods: scroll_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <10>;
            flavor = "hold-preferred";
            bindings = <&mo>, <&kp>;
        };

        sniping_mods: sniping_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
            bindings = <&mo>, <&mkp>;
        };
    };
};

/ {
    macros {
        par: par {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 10>,
                <&macro_tap>,
                <&kp RPAR &kp LEFT &kp LPAR>;
        };
        bkt: bkt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 10>,
                <&macro_tap>,
                <&kp RBKT &kp LEFT &kp LBKT>;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            bindings = <&kp ESC>;
            key-positions = <0 1>;
            layers = <0>;
        };

        combo_grave {
            timeout-ms = <50>;
            bindings = <&kp GRAVE>;
            key-positions = <1 2>;
        };

        combo_cut {
            timeout-ms = <50>;
            bindings = <&kp LC(X)>;
            key-positions = <20 21>;
        };

        combo_copy {
            timeout-ms = <50>;
            bindings = <&kp LC(C)>;
            key-positions = <21 22>;
        };

        combo_paste {
            timeout-ms = <50>;
            bindings = <&kp LC(V)>;
            key-positions = <22 23>;
        };

        combo_lang {
            timeout-ms = <50>;
            bindings = <&kp RALT>;
            key-positions = <27 28>;
        };

        combo_capslock {
            timeout-ms = <50>;
            bindings = <&kp CAPS>;
            key-positions = <17 18>;
        };

        combo_bkt {
            timeout-ms = <50>;
            bindings = <&bkt>;
            key-positions = <6 7>;
        };

        combo_par {
            timeout-ms = <50>;
            bindings = <&par>;
            key-positions = <7 8>;
        };

        combo_sqt {
            timeout-ms = <50>;
            bindings = <&kp SEMI>;
            key-positions = <18 19>;
        };

        combo_m {
            timeout-ms = <50>;
            bindings = <&kp M>;
            key-positions = <26 27>;
        };

        combo_mouse4 {
            timeout-ms = <50>;
            bindings = <&mkp MB4>;
            key-positions = <26 17>;
        };

        combo_mouse5 {
            timeout-ms = <50>;
            bindings = <&mkp MB5>;
            key-positions = <28 17>;
        };

        combo_SQ {
            timeout-ms = <50>;
            bindings = <&kp LS(Q)>;
            key-positions = <0 31>;
        };

        combo_SW {
            timeout-ms = <50>;
            bindings = <&kp LS(W)>;
            key-positions = <31 1>;
        };

        combo_SE {
            timeout-ms = <50>;
            bindings = <&kp LS(E)>;
            key-positions = <2 31>;
        };

        combo_SR {
            timeout-ms = <50>;
            bindings = <&kp LS(R)>;
            key-positions = <3 31>;
        };

        combo_ST {
            timeout-ms = <50>;
            bindings = <&kp LS(T)>;
            key-positions = <4 31>;
        };

        combo_SO {
            timeout-ms = <50>;
            bindings = <&kp LS(O)>;
            key-positions = <8 33>;
        };

        combo_SP {
            timeout-ms = <50>;
            bindings = <&kp LS(P)>;
            key-positions = <9 33>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "default";
            bindings = <
&ht F1 Q    &ht F2 W    &ht F3 E     &ht F4 R     &ht F5 T             &ht F6 Y   &ht F7 U     &ht F8 I     &ht F9 O    &ht F10 P
&hm LGUI A  &hm LALT S  &hm LCTRL D  &hm LSHFT F  &ht F11 G            &ht F12 H  &hm LSHFT J  &hm LCTRL K  &hm LALT L  &hm LGUI SQT
&kp Z       &kp X       &kp C        &kp V        &kp B                &lt 4 N      &kp M        &kp COMMA    &kp DOT     &kp FSLH
                                     &lt 1 ENTER  &lt 2 SPACE          &lt 5 SPACE
            >;
        };

        MOUSE {
            label = "MOUSE";
            bindings = <
&trans  &trans  &trans  &trans  &trans          &trans  &trans    &trans    &trans         &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans    &trans    &trans         &trans
&trans  &trans  &trans  &trans  &trans          &trans  &mkp LCLK  &mkp MCLK SCROLL SNIPING
                        &trans  &trans          &trans
            >;
        };

        NUMBER {
            label = "NUMBER";
            bindings = <
&kp HOME      &kp END        &kp UP          &kp BSPC         &kp DEL            &kp PLUS   &kp N7  &kp N8  &kp N9  &kp N0
&hm LGUI TAB  &hm LALT LEFT  &hm LCTRL DOWN  &hm LSHFT RIGHT  &kp PG_UP          &kp MINUS  &kp N4  &kp N5  &kp N6  &kp EQUAL
&trans        &trans         &trans          &trans           &kp PG_DN          &kp N0     &kp N1  &kp N2  &kp N3  &kp DOT
                                             &trans           &trans         &trans
            >;
        };

        FUNCTION {
            label = "FUNCTION";
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4          &bt BT_CLR   &bt BT_CLR_ALL  &trans   &trans   &kp N1
&trans        &trans        &trans        &trans        &trans                &trans        &trans        &trans        &trans        &trans
&trans        &trans        &trans        &trans        &trans                &trans        &trans        &trans        &trans        &trans
                                          &trans        &trans         &trans
            >;
        };

        SCROLL_MOD {
            label = "SCROLL";
            bindings = <
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
                        &trans  &trans         &trans
            >;
        };

        SNIPING_MOD {
            label = "SNIPING";
            bindings = <
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
                        &trans  &trans         &trans
            >;
        };
    };
};
